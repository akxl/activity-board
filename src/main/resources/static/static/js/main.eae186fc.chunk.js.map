{"version":3,"sources":["rest-version/BoardRest.js","App.js","serviceWorker.js","index.js"],"names":["uuid","require","baseUrl","BoardRest","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","tickets","handleTicketChange","bind","assertThisInitialized","event","id","updateTicket","target","value","category","description","myId","insertTicket","setState","update","defineProperty","$set","_this2","console","log","filteredState","keys","forEach","ticketKey","deleteTicket","preventDefault","dataTransfer","setData","getData","_this3","fetch","method","mode","cache","headers","Content-Type","then","response","json","data","JSON","stringify","ticket","displayRefreshedTickets","catch","error","message","body","refreshTickets","_this4","backlog","inProgress","completed","push","react_default","a","createElement","key","className","draggable","onDragStart","type","aria-label","onClick","removeTicket","aria-hidden","react_contenteditable_default","html","disabled","onChange","BoardRest_Navbar","onDragOver","onDrop","addTicket","Component","Navbar","href","App","BoardRest_BoardRest","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.eae186fc.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport ContentEditable from 'react-contenteditable';\r\nimport update from 'immutability-helper';\r\nimport './BoardRest.css'\r\n\r\nconst uuid = require('uuid/v4');\r\n\r\nconst baseUrl = '/api/ticket';\r\n\r\nexport default class BoardRest extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleTicketChange = this.handleTicketChange.bind(this);\r\n    }\r\n    \r\n    state = {\r\n        tickets: {\r\n            \r\n        }\r\n    }\r\n\r\n    handleTicketChange(event, id) {\r\n        this.updateTicket(id, event.target.value, this.state.tickets[id].category)\r\n        this.state.tickets[id].description = event.target.value;\r\n    }\r\n\r\n    addTicket(category) {\r\n        let myId = uuid();\r\n        this.insertTicket(myId, \"New ticket\", category);\r\n        this.setState(update(this.state, {\r\n            tickets: {\r\n                [myId]:\r\n                    {$set: {\r\n                        description: \"New ticket\",\r\n                        category: category\r\n                    }}\r\n            }\r\n        })\r\n        )\r\n    }\r\n\r\n    displayRefreshedTickets(id, description, category) {\r\n        this.setState(update(this.state, {\r\n            tickets: {\r\n                [id]:\r\n                    {$set: {\r\n                        description: description,\r\n                    category: category\r\n                    }}\r\n            }\r\n        })\r\n        )\r\n    }\r\n\r\n    removeTicket(id) {\r\n        console.log(id)\r\n        var filteredState = {}\r\n        Object.keys(this.state.tickets).forEach((ticketKey) => {\r\n            if (ticketKey !== id.ticketKey) {\r\n                filteredState[ticketKey] = this.state.tickets[ticketKey]\r\n            }\r\n            else {\r\n                this.deleteTicket(ticketKey, this.state.tickets[ticketKey].description, this.state.tickets[ticketKey].category);\r\n            }\r\n        })\r\n        console.log(filteredState);\r\n        this.setState({tickets: filteredState});\r\n    }\r\n\r\n    onDragOver(event) {\r\n        event.preventDefault();\r\n    };\r\n\r\n    onDragStart(event, id) {\r\n        event.dataTransfer.setData(\"id\", id);\r\n    }\r\n\r\n    onDrop(event, category) {\r\n        let id = event.dataTransfer.getData(\"id\");\r\n        console.log(id)\r\n        let description = this.state.tickets[id].description;\r\n        this.updateTicket(id, description, category);\r\n        this.setState(update(this.state, {\r\n            tickets: {\r\n                [id]:\r\n                    {$set: {\r\n                        description: description,\r\n                        category: category\r\n                    }}\r\n            }\r\n        })\r\n        )\r\n    }\r\n\r\n    refreshTickets() {\r\n        fetch(baseUrl,{\r\n            method: \"GET\",\r\n            mode: 'cors',\r\n            cache: 'no-cache',\r\n            headers: {\r\n                \"Content-Type\": \"application/json; charset=utf-8\"\r\n            }\r\n        }).then((response) => {\r\n            return response.json();\r\n        }).then((data) => {\r\n            console.log(JSON.stringify(data));\r\n            data.forEach((ticket) => {\r\n                this.displayRefreshedTickets(ticket.id, ticket.description, ticket.category)\r\n            })\r\n        }).catch((error) => {\r\n            console.log(error.message);\r\n        })\r\n    }\r\n\r\n    insertTicket(id, description, category) {\r\n        let data = {\r\n            id: id,\r\n            description: description,\r\n            category: category\r\n        }\r\n        fetch(baseUrl,{\r\n            method: \"POST\",\r\n            mode: 'cors',\r\n            cache: 'no-cache',\r\n            body: JSON.stringify(data),\r\n            headers: {\r\n                \"Content-Type\": \"application/json; charset=utf-8\"\r\n            }\r\n        }).then((response) => {\r\n            return response.json();\r\n        }).then((data) => {\r\n            console.log(JSON.stringify(data));\r\n        }).catch((error) => {\r\n            console.log(error.message);\r\n        })\r\n    }\r\n\r\n    updateTicket(id, description, category) {\r\n        let data = {\r\n            id: id,\r\n            description: description,\r\n            category: category\r\n        }\r\n        fetch(baseUrl,{\r\n            method: \"PUT\",\r\n            mode: 'cors',\r\n            cache: 'no-cache',\r\n            body: JSON.stringify(data),\r\n            headers: {\r\n                \"Content-Type\": \"application/json; charset=utf-8\"\r\n            }\r\n        }).then((response) => {\r\n            return response.json();\r\n        }).then((data) => {\r\n            console.log(JSON.stringify(data));\r\n        }).catch((error) => {\r\n            console.log(error.message);\r\n        })\r\n    }\r\n\r\n    deleteTicket(id, description, category) {\r\n        let data = {\r\n            id: id,\r\n            description: description,\r\n            category: category\r\n        }\r\n        fetch(baseUrl,{\r\n            method: \"DELETE\",\r\n            mode: 'cors',\r\n            cache: 'no-cache',\r\n            body: JSON.stringify(data),\r\n            headers: {\r\n                \"Content-Type\": \"application/json; charset=utf-8\"\r\n            }\r\n        }).then((response) => {\r\n            return response.json();\r\n        }).then((data) => {\r\n            console.log(JSON.stringify(data));\r\n        }).catch((error) => {\r\n            console.log(error.message);\r\n        })\r\n    }\r\n\r\n    componentWillMount() {\r\n\r\n        this.refreshTickets();\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        var tickets = {\r\n            backlog: [],\r\n            inProgress: [],\r\n            completed: []\r\n        }\r\n\r\n        Object.keys(this.state.tickets).forEach((ticketKey) => {\r\n            tickets[this.state.tickets[ticketKey].category].push(\r\n                <div key={ticketKey}\r\n                    className=\"alert alert-dark\"\r\n                    draggable\r\n                    onDragStart={(event) => this.onDragStart(event, ticketKey)}\r\n                >\r\n                    <div>\r\n                    <div>\r\n                    <button type=\"button\" className=\"close\" aria-label=\"Close\" onClick={(event)=>this.removeTicket({ticketKey})}>\r\n                        <span aria-hidden=\"true\">&times;</span>\r\n                    </button>\r\n                    </div>\r\n\r\n\r\n                    <div>\r\n                    <ContentEditable\r\n                        html={this.state.tickets[ticketKey].description}\r\n                        disabled={false}\r\n                        onChange={(event) => {this.handleTicketChange(event, ticketKey)}}\r\n                    />\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        });\r\n\r\n        return(\r\n            <div>\r\n            <Navbar />\r\n            <div className='container-fluid'>\r\n                <div className='actualBoard row'>\r\n                    <div className=\"activityColumn border rounded col-sm\">\r\n                        <div className=\"backlogColumn\"\r\n                            onDragOver={(event)=>this.onDragOver(event)}\r\n                            onDrop={(event)=>this.onDrop(event, \"backlog\")}\r\n                        >\r\n                            <div className=\"columnHeader d-flex flex-row justify-content-between\">\r\n                                <div><h3>Backlog</h3></div>\r\n                                <div><button type=\"button\" className=\"btn btn-dark\" onClick={(event) => this.addTicket('backlog')}>Add</button></div>   \r\n                            </div> \r\n                            {tickets.backlog}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"activityColumn border rounded col-sm\">\r\n                        <div className=\"inProgressColumn\"\r\n                            onDragOver={(event)=>this.onDragOver(event)}\r\n                            onDrop={(event)=>this.onDrop(event, \"inProgress\")}\r\n                        >\r\n                            <div className=\"columnHeader d-flex flex-row justify-content-between\">\r\n                                <div><h3>In Progress</h3></div>\r\n                                <div><button type=\"button\" className=\"btn btn-dark\" onClick={(event) => this.addTicket('inProgress')}>Add</button></div>   \r\n                            </div>          \r\n                            {tickets.inProgress}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"activityColumn border rounded col-sm\">\r\n                        <div className=\"completedColumn\"\r\n                            onDragOver={(event)=>this.onDragOver(event)}\r\n                            onDrop={(event)=>this.onDrop(event, \"completed\")}\r\n                        >\r\n                            <div className=\"columnHeader d-flex flex-row justify-content-between\">\r\n                                <div><h3>Completed</h3></div>\r\n                                <div><button type=\"button\" className=\"btn btn-dark\" onClick={(event) => this.addTicket('completed')}>Add</button></div>   \r\n                            </div> \r\n                            {tickets.completed}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\nclass Navbar extends Component {\r\n\r\n    render() {\r\n        return(\r\n            <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n                <a className=\"navbar-brand\" href=\"#\">Activity Board</a>\r\n            </nav>\r\n        )\r\n    }\r\n\r\n}","import React, { Component } from 'react';\nimport BoardRest from './rest-version/BoardRest';\n\nclass App extends Component {\n  render() {\n    return (\n      <BoardRest />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}